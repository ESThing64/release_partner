{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["/Users/johncoakley/development/projects/release_partner/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}