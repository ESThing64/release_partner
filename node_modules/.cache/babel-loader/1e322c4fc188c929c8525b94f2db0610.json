{"ast":null,"code":"import{useDispatch}from'react-redux';// material-ui\nimport{Button,Grid,Stack,TextField}from'@mui/material';// project imports\nimport MainCard from'ui-component/cards/MainCard';import AnimateButton from'ui-component/extended/AnimateButton';import{SNACKBAR_OPEN}from'store/actions';import{gridSpacing}from'store/constant';// third-party\nimport{useFormik}from'formik';import*as yup from'yup';/**\r\n * 'Enter your email'\r\n * yup.string Expected 0 arguments, but got 1 */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var validationSchema=yup.object({emailInstant:yup.string().email('Enter a valid email').required('Email is required'),passwordInstant:yup.string().min(8,'Password should be of minimum 8 characters length').required('Password is required')});// ==============================|| FORM VALIDATION - INSTANT FEEDBACK FORMIK  ||============================== //\nvar InstantFeedback=function InstantFeedback(){var dispatch=useDispatch();var formik=useFormik({initialValues:{emailInstant:'',passwordInstant:''},validationSchema:validationSchema,onSubmit:function onSubmit(){dispatch({type:SNACKBAR_OPEN,open:true,message:'On Leave - Submit Success',variant:'alert',alertSeverity:'success'});}});return/*#__PURE__*/_jsx(MainCard,{title:\"On Leave\",children:/*#__PURE__*/_jsx(\"form\",{onSubmit:formik.handleSubmit,children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:gridSpacing,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(TextField,{fullWidth:true,id:\"emailInstant\",name:\"emailInstant\",label:\"Email\",defaultValue:formik.values.emailInstant,onChange:formik.handleChange,onBlur:formik.handleBlur,error:formik.touched.emailInstant&&Boolean(formik.errors.emailInstant),helperText:formik.touched.emailInstant&&formik.errors.emailInstant})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(TextField,{fullWidth:true,id:\"passwordInstant\",name:\"passwordInstant\",label:\"Password\",type:\"password\",defaultValue:formik.values.passwordInstant,onChange:formik.handleChange,onBlur:formik.handleBlur,error:formik.touched.passwordInstant&&Boolean(formik.errors.passwordInstant),helperText:formik.touched.passwordInstant&&formik.errors.passwordInstant})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Stack,{direction:\"row\",justifyContent:\"flex-end\",children:/*#__PURE__*/_jsx(AnimateButton,{children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",type:\"submit\",children:\"Submit\"})})})})]})})});};export default InstantFeedback;","map":{"version":3,"sources":["/Users/johncoakley/development/projects/release_partner/src/views/forms/forms-validation/InstantFeedback.js"],"names":["useDispatch","Button","Grid","Stack","TextField","MainCard","AnimateButton","SNACKBAR_OPEN","gridSpacing","useFormik","yup","validationSchema","object","emailInstant","string","email","required","passwordInstant","min","InstantFeedback","dispatch","formik","initialValues","onSubmit","type","open","message","variant","alertSeverity","handleSubmit","values","handleChange","handleBlur","touched","Boolean","errors"],"mappings":"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","sourcesContent":["import { useDispatch } from 'react-redux';\r\n\r\n// material-ui\r\nimport { Button, Grid, Stack, TextField } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\n/**\r\n * 'Enter your email'\r\n * yup.string Expected 0 arguments, but got 1 */\r\nconst validationSchema = yup.object({\r\n    emailInstant: yup.string().email('Enter a valid email').required('Email is required'),\r\n    passwordInstant: yup.string().min(8, 'Password should be of minimum 8 characters length').required('Password is required')\r\n});\r\n\r\n// ==============================|| FORM VALIDATION - INSTANT FEEDBACK FORMIK  ||============================== //\r\n\r\nconst InstantFeedback = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            emailInstant: '',\r\n            passwordInstant: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: () => {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'On Leave - Submit Success',\r\n                variant: 'alert',\r\n                alertSeverity: 'success'\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <MainCard title=\"On Leave\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"emailInstant\"\r\n                            name=\"emailInstant\"\r\n                            label=\"Email\"\r\n                            defaultValue={formik.values.emailInstant}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.emailInstant && Boolean(formik.errors.emailInstant)}\r\n                            helperText={formik.touched.emailInstant && formik.errors.emailInstant}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"passwordInstant\"\r\n                            name=\"passwordInstant\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            defaultValue={formik.values.passwordInstant}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.passwordInstant && Boolean(formik.errors.passwordInstant)}\r\n                            helperText={formik.touched.passwordInstant && formik.errors.passwordInstant}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default InstantFeedback;\r\n"]},"metadata":{},"sourceType":"module"}