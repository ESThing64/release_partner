{"ast":null,"code":"import _objectSpread from\"/Users/johncoakley/development/projects/release_partner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useDispatch,useSelector}from'react-redux';// material-ui\nimport{Box}from'@mui/material';// third-party\nimport{DragDropContext,Droppable}from'react-beautiful-dnd';// project imports\nimport Columns from'./Columns';import AddColumn from'./AddColumn';import ItemDetails from'./ItemDetails';import MainCard from'ui-component/cards/MainCard';import{UPDATE_COLUMN_ORDER,UPDATE_COLUMN_ITEM_ORDER}from'store/actions';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var getDragWrapper=function getDragWrapper(isDraggingOver){return{p:1,bgcolor:isDraggingOver?'primary.200':'transparent',display:'flex',overflow:'auto'};};// ==============================|| KANBAN - BOARD ||============================== //\nvar Board=function Board(){var dispatch=useDispatch();var kanban=useSelector(function(state){return state.kanban;});var columns=kanban.columns,columnsOrder=kanban.columnsOrder;// handle drag & drop\nvar onDragEnd=function onDragEnd(result){var newColumn;var source=result.source,destination=result.destination,draggableId=result.draggableId,type=result.type;if(!destination)return;if(destination.droppableId===source.droppableId&&destination.index===source.index)return;if(type==='column'){var newColumnsOrder=Array.from(columnsOrder);newColumnsOrder.splice(source.index,1);// remove dragged column\nnewColumnsOrder.splice(destination===null||destination===void 0?void 0:destination.index,0,draggableId);// set column new position\ndispatch({type:UPDATE_COLUMN_ORDER,payload:{columnsOrder:newColumnsOrder}});return;}// find dragged item's column\nvar sourceColumn=columns.filter(function(item){return item.id===source.droppableId;})[0];// find dropped item's column\nvar destinationColumn=columns.filter(function(item){return item.id===destination.droppableId;})[0];// if - moving items in the same list\n// else - moving items from one list to another\nif(sourceColumn===destinationColumn){var newItemIds=Array.from(sourceColumn.itemIds);// remove the id of dragged item from its original position\nnewItemIds.splice(source.index,1);// insert the id of dragged item to the new position\nnewItemIds.splice(destination.index,0,draggableId);// updated column\nvar newSourceColumn=_objectSpread(_objectSpread({},sourceColumn),{},{itemIds:newItemIds});newColumn=columns.map(function(column){if(column.id===newSourceColumn.id){return newSourceColumn;}return column;});}else{var newSourceItemIds=Array.from(sourceColumn.itemIds);// remove the id of dragged item from its original column\nnewSourceItemIds.splice(source.index,1);// updated dragged items's column\nvar _newSourceColumn=_objectSpread(_objectSpread({},sourceColumn),{},{itemIds:newSourceItemIds});var newDestinationItemIds=Array.from(destinationColumn.itemIds);// insert the id of dragged item to the new position in dropped column\nnewDestinationItemIds.splice(destination.index,0,draggableId);// updated dropped item's column\nvar newDestinationColumn=_objectSpread(_objectSpread({},destinationColumn),{},{itemIds:newDestinationItemIds});newColumn=columns.map(function(column){if(column.id===_newSourceColumn.id){return _newSourceColumn;}if(column.id===newDestinationColumn.id){return newDestinationColumn;}return column;});}dispatch({type:UPDATE_COLUMN_ITEM_ORDER,payload:{columns:newColumn}});};return/*#__PURE__*/_jsxs(Box,{sx:{display:'flex'},children:[/*#__PURE__*/_jsx(DragDropContext,{onDragEnd:onDragEnd,children:/*#__PURE__*/_jsx(Droppable,{droppableId:\"columns\",direction:\"horizontal\",type:\"column\",children:function children(provided,snapshot){return/*#__PURE__*/_jsxs(MainCard,_objectSpread(_objectSpread({border:false,ref:provided.innerRef,contentSX:getDragWrapper(snapshot.isDraggingOver)},provided.droppableProps),{},{children:[columnsOrder.map(function(columnId,index){var column=columns.filter(function(item){return item.id===columnId;})[0];return/*#__PURE__*/_jsx(Columns,{column:column,index:index},columnId);}),provided.placeholder,/*#__PURE__*/_jsx(AddColumn,{})]}));}})}),/*#__PURE__*/_jsx(ItemDetails,{})]});};export default Board;","map":{"version":3,"sources":["/Users/johncoakley/development/projects/release_partner/src/views/application/kanban/Board/index.js"],"names":["useDispatch","useSelector","Box","DragDropContext","Droppable","Columns","AddColumn","ItemDetails","MainCard","UPDATE_COLUMN_ORDER","UPDATE_COLUMN_ITEM_ORDER","getDragWrapper","isDraggingOver","p","bgcolor","display","overflow","Board","dispatch","kanban","state","columns","columnsOrder","onDragEnd","result","newColumn","source","destination","draggableId","type","droppableId","index","newColumnsOrder","Array","from","splice","payload","sourceColumn","filter","item","id","destinationColumn","newItemIds","itemIds","newSourceColumn","map","column","newSourceItemIds","newDestinationItemIds","newDestinationColumn","provided","snapshot","innerRef","droppableProps","columnId","placeholder"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { Box } from '@mui/material';\r\n\r\n// third-party\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\n// project imports\r\nimport Columns from './Columns';\r\nimport AddColumn from './AddColumn';\r\nimport ItemDetails from './ItemDetails';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { UPDATE_COLUMN_ORDER, UPDATE_COLUMN_ITEM_ORDER } from 'store/actions';\r\n\r\nconst getDragWrapper = (isDraggingOver) => ({\r\n    p: 1,\r\n    bgcolor: isDraggingOver ? 'primary.200' : 'transparent',\r\n    display: 'flex',\r\n    overflow: 'auto'\r\n});\r\n\r\n// ==============================|| KANBAN - BOARD ||============================== //\r\n\r\nconst Board = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const kanban = useSelector((state) => state.kanban);\r\n    const { columns, columnsOrder } = kanban;\r\n\r\n    // handle drag & drop\r\n    const onDragEnd = (result) => {\r\n        let newColumn;\r\n        const { source, destination, draggableId, type } = result;\r\n\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        if (type === 'column') {\r\n            const newColumnsOrder = Array.from(columnsOrder);\r\n\r\n            newColumnsOrder.splice(source.index, 1); // remove dragged column\r\n            newColumnsOrder.splice(destination?.index, 0, draggableId); // set column new position\r\n\r\n            dispatch({\r\n                type: UPDATE_COLUMN_ORDER,\r\n                payload: { columnsOrder: newColumnsOrder }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // find dragged item's column\r\n        const sourceColumn = columns.filter((item) => item.id === source.droppableId)[0];\r\n\r\n        // find dropped item's column\r\n        const destinationColumn = columns.filter((item) => item.id === destination.droppableId)[0];\r\n\r\n        // if - moving items in the same list\r\n        // else - moving items from one list to another\r\n        if (sourceColumn === destinationColumn) {\r\n            const newItemIds = Array.from(sourceColumn.itemIds);\r\n\r\n            // remove the id of dragged item from its original position\r\n            newItemIds.splice(source.index, 1);\r\n\r\n            // insert the id of dragged item to the new position\r\n            newItemIds.splice(destination.index, 0, draggableId);\r\n\r\n            // updated column\r\n            const newSourceColumn = {\r\n                ...sourceColumn,\r\n                itemIds: newItemIds\r\n            };\r\n\r\n            newColumn = columns.map((column) => {\r\n                if (column.id === newSourceColumn.id) {\r\n                    return newSourceColumn;\r\n                }\r\n                return column;\r\n            });\r\n        } else {\r\n            const newSourceItemIds = Array.from(sourceColumn.itemIds);\r\n\r\n            // remove the id of dragged item from its original column\r\n            newSourceItemIds.splice(source.index, 1);\r\n\r\n            // updated dragged items's column\r\n            const newSourceColumn = {\r\n                ...sourceColumn,\r\n                itemIds: newSourceItemIds\r\n            };\r\n\r\n            const newDestinationItemIds = Array.from(destinationColumn.itemIds);\r\n\r\n            // insert the id of dragged item to the new position in dropped column\r\n            newDestinationItemIds.splice(destination.index, 0, draggableId);\r\n\r\n            // updated dropped item's column\r\n            const newDestinationColumn = {\r\n                ...destinationColumn,\r\n                itemIds: newDestinationItemIds\r\n            };\r\n\r\n            newColumn = columns.map((column) => {\r\n                if (column.id === newSourceColumn.id) {\r\n                    return newSourceColumn;\r\n                }\r\n                if (column.id === newDestinationColumn.id) {\r\n                    return newDestinationColumn;\r\n                }\r\n                return column;\r\n            });\r\n        }\r\n\r\n        dispatch({\r\n            type: UPDATE_COLUMN_ITEM_ORDER,\r\n            payload: {\r\n                columns: newColumn\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ display: 'flex' }}>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"columns\" direction=\"horizontal\" type=\"column\">\r\n                    {(provided, snapshot) => (\r\n                        <MainCard\r\n                            border={false}\r\n                            ref={provided.innerRef}\r\n                            contentSX={getDragWrapper(snapshot.isDraggingOver)}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {columnsOrder.map((columnId, index) => {\r\n                                const column = columns.filter((item) => item.id === columnId)[0];\r\n                                return <Columns key={columnId} column={column} index={index} />;\r\n                            })}\r\n                            {provided.placeholder}\r\n                            <AddColumn />\r\n                        </MainCard>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <ItemDetails />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}