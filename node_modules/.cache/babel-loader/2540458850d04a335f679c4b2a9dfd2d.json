{"ast":null,"code":"import PropTypes from'prop-types';import{useNavigate}from'react-router-dom';// project imports\nimport useAuth from'hooks/useAuth';import{useEffect}from'react';// ==============================|| AUTH GUARD ||============================== //\n/**\r\n * Authentication guard for routes\r\n * @param {PropTypes.node} children children element/node\r\n */var AuthGuard=function AuthGuard(_ref){var children=_ref.children;var _useAuth=useAuth(),isLoggedIn=_useAuth.isLoggedIn;var navigate=useNavigate();useEffect(function(){if(!isLoggedIn){navigate('login',{replace:true});}},[isLoggedIn,navigate]);return children;};AuthGuard.propTypes={children:PropTypes.node};export default AuthGuard;","map":{"version":3,"sources":["/Users/johncoakley/development/projects/release_partner/src/utils/route-guard/AuthGuard.js"],"names":["PropTypes","useNavigate","useAuth","useEffect","AuthGuard","children","isLoggedIn","navigate","replace","propTypes","node"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,YAAtB,CACA,OAASC,WAAT,KAA4B,kBAA5B,CAEA;AACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,OAASC,SAAT,KAA0B,OAA1B,CAEA;AAEA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAChC,aAAuBH,OAAO,EAA9B,CAAQI,UAAR,UAAQA,UAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CAEAE,SAAS,CAAC,UAAM,CACZ,GAAI,CAACG,UAAL,CAAiB,CACbC,QAAQ,CAAC,OAAD,CAAU,CAAEC,OAAO,CAAE,IAAX,CAAV,CAAR,CACH,CACJ,CAJQ,CAIN,CAACF,UAAD,CAAaC,QAAb,CAJM,CAAT,CAMA,MAAOF,CAAAA,QAAP,CACH,CAXD,CAaAD,SAAS,CAACK,SAAV,CAAsB,CAClBJ,QAAQ,CAAEL,SAAS,CAACU,IADF,CAAtB,CAIA,cAAeN,CAAAA,SAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// project imports\r\nimport useAuth from 'hooks/useAuth';\r\nimport { useEffect } from 'react';\r\n\r\n// ==============================|| AUTH GUARD ||============================== //\r\n\r\n/**\r\n * Authentication guard for routes\r\n * @param {PropTypes.node} children children element/node\r\n */\r\nconst AuthGuard = ({ children }) => {\r\n    const { isLoggedIn } = useAuth();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            navigate('login', { replace: true });\r\n        }\r\n    }, [isLoggedIn, navigate]);\r\n\r\n    return children;\r\n};\r\n\r\nAuthGuard.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default AuthGuard;\r\n"]},"metadata":{},"sourceType":"module"}