{"ast":null,"code":"import _slicedToArray from\"/Users/johncoakley/development/projects/release_partner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/johncoakley/development/projects/release_partner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useState}from'react';import{useDispatch,useSelector}from'react-redux';// material-ui\nimport{useTheme}from'@mui/material/styles';import{Button,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Tooltip}from'@mui/material';// third-party\nimport{DragDropContext,Droppable}from'react-beautiful-dnd';// project import\nimport AddStory from'./AddStory';import UserStory from'./UserStory';import ItemDetails from'../Board/ItemDetails';import{UPDATE_STORY_ORDER,UPDATE_STORY_ITEM_ORDER}from'store/actions';// assets\nimport AddIcon from'@mui/icons-material/Add';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var getDropWrapper=function getDropWrapper(isDraggingOver,theme){return{background:isDraggingOver?theme.palette.secondary.light+50:'transparent'};};// ==============================|| KANBAN - BACKLOGS ||============================== //\nvar Backlogs=function Backlogs(){var theme=useTheme();var dispatch=useDispatch();var kanban=useSelector(function(state){return state.kanban;});var userStory=kanban.userStory,userStoryOrder=kanban.userStoryOrder;var onDragEnd=function onDragEnd(result){var newUserStory;var source=result.source,destination=result.destination,draggableId=result.draggableId,type=result.type;if(!destination)return;if(destination.droppableId===source.droppableId&&destination.index===source.index)return;if(type==='user-story'){var newUserStoryOrder=Array.from(userStoryOrder);newUserStoryOrder.splice(source.index,1);// remove dragged column\nnewUserStoryOrder.splice(destination===null||destination===void 0?void 0:destination.index,0,draggableId);// set column new position\ndispatch({type:UPDATE_STORY_ORDER,payload:{userStoryOrder:newUserStoryOrder}});return;}// find dragged item's column\nvar sourceUserStory=userStory.filter(function(story){return story.id===source.droppableId;})[0];// find dropped item's column\nvar destinationUserStory=userStory.filter(function(story){return story.id===destination.droppableId;})[0];// if - moving items in the same list\n// else - moving items from one list to another\nif(sourceUserStory===destinationUserStory){var newItemIds=Array.from(sourceUserStory.itemIds);// remove the id of dragged item from its original position\nnewItemIds.splice(source.index,1);// insert the id of dragged item to the new position\nnewItemIds.splice(destination.index,0,draggableId);// updated column\nvar newSourceUserStory=_objectSpread(_objectSpread({},sourceUserStory),{},{itemIds:newItemIds});newUserStory=userStory.map(function(story){if(story.id===newSourceUserStory.id){return newSourceUserStory;}return story;});}else{var newSourceItemIds=Array.from(sourceUserStory.itemIds);// remove the id of dragged item from its original column\nnewSourceItemIds.splice(source.index,1);// updated dragged items's column\nvar _newSourceUserStory=_objectSpread(_objectSpread({},sourceUserStory),{},{itemIds:newSourceItemIds});var newDestinationItemIds=Array.from(destinationUserStory.itemIds);// insert the id of dragged item to the new position in dropped column\nnewDestinationItemIds.splice(destination.index,0,draggableId);// updated dropped item's column\nvar newDestinationSourceUserStory=_objectSpread(_objectSpread({},destinationUserStory),{},{itemIds:newDestinationItemIds});newUserStory=userStory.map(function(story){if(story.id===_newSourceUserStory.id){return _newSourceUserStory;}if(story.id===newDestinationSourceUserStory.id){return newDestinationSourceUserStory;}return story;});}dispatch({type:UPDATE_STORY_ITEM_ORDER,payload:{userStory:newUserStory}});};// drawer\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),openDrawer=_useState2[0],setOpenDrawer=_useState2[1];var handleDrawerOpen=function handleDrawerOpen(){setOpenDrawer(function(prevState){return!prevState;});};var addStory=function addStory(){setOpenDrawer(function(prevState){return!prevState;});};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(TableContainer,{children:[/*#__PURE__*/_jsx(DragDropContext,{onDragEnd:onDragEnd,children:/*#__PURE__*/_jsx(Droppable,{droppableId:\"user-story\",type:\"user-story\",children:function children(provided,snapshot){return/*#__PURE__*/_jsxs(Table,_objectSpread(_objectSpread({size:\"small\",\"aria-label\":\"collapsible table\"},provided.droppableProps),{},{ref:provided.innerRef,sx:getDropWrapper(snapshot.isDraggingOver,theme),children:[/*#__PURE__*/_jsx(TableHead,{sx:{'& th,& td':{whiteSpace:'nowrap'}},children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{sx:{pl:3},children:/*#__PURE__*/_jsx(Tooltip,{title:\"Add User Story\",children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",size:\"small\",color:\"secondary\",onClick:addStory,endIcon:/*#__PURE__*/_jsx(AddIcon,{}),children:\"ADD\"})})}),/*#__PURE__*/_jsx(TableCell,{children:\"Id\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Title\"}),/*#__PURE__*/_jsx(TableCell,{}),/*#__PURE__*/_jsx(TableCell,{children:\"State\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Assigned To\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Priority\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Due Date\"})]})}),/*#__PURE__*/_jsxs(TableBody,{sx:{'& th,& td':{whiteSpace:'nowrap'}},children:[userStoryOrder.map(function(storyId,index){var story=userStory.filter(function(item){return item.id===storyId;})[0];return/*#__PURE__*/_jsx(UserStory,{story:story,index:index},story.id);}),provided.placeholder]})]}));}})}),/*#__PURE__*/_jsx(AddStory,{open:openDrawer,handleDrawerOpen:handleDrawerOpen}),/*#__PURE__*/_jsx(ItemDetails,{})]})});};export default Backlogs;","map":{"version":3,"sources":["/Users/johncoakley/development/projects/release_partner/src/views/application/kanban/Backlogs/index.js"],"names":["useState","useDispatch","useSelector","useTheme","Button","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Tooltip","DragDropContext","Droppable","AddStory","UserStory","ItemDetails","UPDATE_STORY_ORDER","UPDATE_STORY_ITEM_ORDER","AddIcon","getDropWrapper","isDraggingOver","theme","background","palette","secondary","light","Backlogs","dispatch","kanban","state","userStory","userStoryOrder","onDragEnd","result","newUserStory","source","destination","draggableId","type","droppableId","index","newUserStoryOrder","Array","from","splice","payload","sourceUserStory","filter","story","id","destinationUserStory","newItemIds","itemIds","newSourceUserStory","map","newSourceItemIds","newDestinationItemIds","newDestinationSourceUserStory","openDrawer","setOpenDrawer","handleDrawerOpen","prevState","addStory","provided","snapshot","droppableProps","innerRef","whiteSpace","pl","storyId","item","placeholder"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\n\r\n// third-party\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\n// project import\r\nimport AddStory from './AddStory';\r\nimport UserStory from './UserStory';\r\nimport ItemDetails from '../Board/ItemDetails';\r\nimport { UPDATE_STORY_ORDER, UPDATE_STORY_ITEM_ORDER } from 'store/actions';\r\n\r\n// assets\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nconst getDropWrapper = (isDraggingOver, theme) => ({\r\n    background: isDraggingOver ? theme.palette.secondary.light + 50 : 'transparent'\r\n});\r\n\r\n// ==============================|| KANBAN - BACKLOGS ||============================== //\r\n\r\nconst Backlogs = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const kanban = useSelector((state) => state.kanban);\r\n    const { userStory, userStoryOrder } = kanban;\r\n\r\n    const onDragEnd = (result) => {\r\n        let newUserStory;\r\n        const { source, destination, draggableId, type } = result;\r\n\r\n        if (!destination) return;\r\n\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        if (type === 'user-story') {\r\n            const newUserStoryOrder = Array.from(userStoryOrder);\r\n\r\n            newUserStoryOrder.splice(source.index, 1); // remove dragged column\r\n            newUserStoryOrder.splice(destination?.index, 0, draggableId); // set column new position\r\n\r\n            dispatch({\r\n                type: UPDATE_STORY_ORDER,\r\n                payload: { userStoryOrder: newUserStoryOrder }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // find dragged item's column\r\n        const sourceUserStory = userStory.filter((story) => story.id === source.droppableId)[0];\r\n\r\n        // find dropped item's column\r\n        const destinationUserStory = userStory.filter((story) => story.id === destination.droppableId)[0];\r\n\r\n        // if - moving items in the same list\r\n        // else - moving items from one list to another\r\n        if (sourceUserStory === destinationUserStory) {\r\n            const newItemIds = Array.from(sourceUserStory.itemIds);\r\n\r\n            // remove the id of dragged item from its original position\r\n            newItemIds.splice(source.index, 1);\r\n\r\n            // insert the id of dragged item to the new position\r\n            newItemIds.splice(destination.index, 0, draggableId);\r\n\r\n            // updated column\r\n            const newSourceUserStory = {\r\n                ...sourceUserStory,\r\n                itemIds: newItemIds\r\n            };\r\n\r\n            newUserStory = userStory.map((story) => {\r\n                if (story.id === newSourceUserStory.id) {\r\n                    return newSourceUserStory;\r\n                }\r\n                return story;\r\n            });\r\n        } else {\r\n            const newSourceItemIds = Array.from(sourceUserStory.itemIds);\r\n\r\n            // remove the id of dragged item from its original column\r\n            newSourceItemIds.splice(source.index, 1);\r\n\r\n            // updated dragged items's column\r\n            const newSourceUserStory = {\r\n                ...sourceUserStory,\r\n                itemIds: newSourceItemIds\r\n            };\r\n\r\n            const newDestinationItemIds = Array.from(destinationUserStory.itemIds);\r\n\r\n            // insert the id of dragged item to the new position in dropped column\r\n            newDestinationItemIds.splice(destination.index, 0, draggableId);\r\n\r\n            // updated dropped item's column\r\n            const newDestinationSourceUserStory = {\r\n                ...destinationUserStory,\r\n                itemIds: newDestinationItemIds\r\n            };\r\n\r\n            newUserStory = userStory.map((story) => {\r\n                if (story.id === newSourceUserStory.id) {\r\n                    return newSourceUserStory;\r\n                }\r\n                if (story.id === newDestinationSourceUserStory.id) {\r\n                    return newDestinationSourceUserStory;\r\n                }\r\n                return story;\r\n            });\r\n        }\r\n\r\n        dispatch({\r\n            type: UPDATE_STORY_ITEM_ORDER,\r\n            payload: {\r\n                userStory: newUserStory\r\n            }\r\n        });\r\n    };\r\n\r\n    // drawer\r\n    const [openDrawer, setOpenDrawer] = useState(false);\r\n    const handleDrawerOpen = () => {\r\n        setOpenDrawer((prevState) => !prevState);\r\n    };\r\n\r\n    const addStory = () => {\r\n        setOpenDrawer((prevState) => !prevState);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TableContainer>\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    <Droppable droppableId=\"user-story\" type=\"user-story\">\r\n                        {(provided, snapshot) => (\r\n                            <Table\r\n                                size=\"small\"\r\n                                aria-label=\"collapsible table\"\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                                sx={getDropWrapper(snapshot.isDraggingOver, theme)}\r\n                            >\r\n                                <TableHead sx={{ '& th,& td': { whiteSpace: 'nowrap' } }}>\r\n                                    <TableRow>\r\n                                        <TableCell sx={{ pl: 3 }}>\r\n                                            <Tooltip title=\"Add User Story\">\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    size=\"small\"\r\n                                                    color=\"secondary\"\r\n                                                    onClick={addStory}\r\n                                                    endIcon={<AddIcon />}\r\n                                                >\r\n                                                    ADD\r\n                                                </Button>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                        <TableCell>Id</TableCell>\r\n                                        <TableCell>Title</TableCell>\r\n                                        <TableCell />\r\n                                        <TableCell>State</TableCell>\r\n                                        <TableCell>Assigned To</TableCell>\r\n                                        <TableCell>Priority</TableCell>\r\n                                        <TableCell>Due Date</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody sx={{ '& th,& td': { whiteSpace: 'nowrap' } }}>\r\n                                    {userStoryOrder.map((storyId, index) => {\r\n                                        const story = userStory.filter((item) => item.id === storyId)[0];\r\n                                        return <UserStory key={story.id} story={story} index={index} />;\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                </TableBody>\r\n                            </Table>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                <AddStory open={openDrawer} handleDrawerOpen={handleDrawerOpen} />\r\n                <ItemDetails />\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Backlogs;\r\n"]},"metadata":{},"sourceType":"module"}